AWSTemplateFormatVersion: '2010-09-09'

Description: Template to setup networking resources such as Virtual Private Cloud(VPC), Internet Gateway, Route Tables, and Routes in a stack

# Parameters
Parameters:
  Environment:
    Description: Infrastructure as Code - Environment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  VpcCidrBlock:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.0.0.0/16
  EC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    Description: 'EC2Instance AMI'
  AMI:
    Type: String
    Default: 'ami-0704737cdb768ad78'
    Description: 'The custom AMI built using Packer'
  DBInstanceIdentifierName:
    Type: String
    Default: 'csye6225'
    Description: 'DBInstance Identifier Name'

  DBName:
    Type: String
    Default: 'csye6225'
    Description: 'DB Name'

  DBUser:
    Type: String
    Default: 'csye6225'
    Description: 'DB username'

  DBPassword:
    Type: String
    Default: 'poptart1234'
    Description: 'DB Password'

# Setup resources
Resources:
  # Virtual Private Cloud
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub Internet Gateway
  # Internet Gateway Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Defining Public Subnets
  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 1, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ1)
  # Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 2, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ2)
  # Public Subnet 3
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]]
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ3)

  # Route table and related configurations
  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Public Route Table
  # Public Route in Route Table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Attach PublicSubnet1 to Route Table
  PublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  # Attach Subnet2 to Route Table
  PublicSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  # Attach Subnet3 to Route Table
  PublicSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  # Defining Private Subnets
  # Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub Private Subnet (AZ1)
  # Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub Private Subnet (AZ2)
  # Private Subnet 3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [5, !Cidr [!GetAtt VPC.CidrBlock, 6, 8]]
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub Private Subnet (AZ3)

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Private Route Table

  # Attach PrivateSubnet1 to Route Table
  PrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  # Attach PrivateSubnet2 to Route Table
  PrivateSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  # Attach PrivateSubnet3 to Route Table
  PrivateSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  # S3 bucket with encryption and lifecycle
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName:
        !Join [
          '',
          [
            !Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId]]]],
            '.',
            !Ref Environment,
            '.sid.me',
          ],
        ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: Change storage class to IA after 30 days
            Status: Enabled
            ExpirationInDays: 31
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Ref Environment

  # Custom security group on the custom VPC
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'ApplicationSecurityGroup'
      GroupDescription: 'Application Security Group'
      VpcId: !Ref VPC
      # Ingress rules
      SecurityGroupIngress:
        # SSH port
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # HTTP port
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # HTTPS port
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # Application port
        - IpProtocol: tcp
          FromPort: 1337
          ToPort: 1337
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2 Application Security Group

  # Create RDS Parameter Group for PostgreSQL
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: PostgreSQL Database
      Family: postgres14
  # Create RDS Subnet Group in the VPC
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private Subnet Group for RDS PostgreSQL Database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  # Create Security Group for RDS with inbound rules from EC2 Instance Security Group
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'DatabaseSecurityGroup'
      GroupDescription: 'Database Security Group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
      Tags:
        - Key: Name
          Value: Database Security Group

  # Create IAM Role for EC2 Instance with S3 Bucket Policy
  S3BucketIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'EC2-CSYE6225'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
  # Create Iam Instance Profile
  S3BucketIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: demo-ec2-instance-profile
      Path: /
      Roles:
        - !Ref S3BucketIAMRole
  RolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:Put*'
              - 's3:Get*'
              - 's3:Delete*'
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
              - !Sub arn:aws:s3:::${S3Bucket}/*
      Roles:
        - Ref: S3BucketIAMRole

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Ref DBInstanceIdentifierName
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: 14.4
      AllocatedStorage: 20
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: false
      MultiAZ: false
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBParameterGroupName: !Ref DBParameterGroup

  # Launch the custom EC2 AMI instance
  EC2AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref S3BucketIAMInstanceProfile
      KeyName: ec2-user
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      DisableApiTermination: false # protected against accidental termination :NO
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 50
            Encrypted: true
      Tags:
        - Key: Name
          Value: webapp
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          pwd
          cd /home/ubuntu/webapp
          cp .env .env.bak
          rm .env
          pwd
          touch .env
          echo PORT=1337 >> .env
          echo HOSTNAME="${RDSInstance.Endpoint.Address}" >> .env
          echo DATABASE="${DBName}" >> .env
          echo DBPASSWORD="${DBPassword}" >> .env
          echo DBUSER="${DBUser}" >> .env
          echo AWS_BUCKET_NAME="${S3Bucket}" >> .env
          echo AWS_REGION="${AWS::Region}" >> .env
          cat .env

          echo "Starting the REST API Service with new .env variables"
          sudo systemctl restart nodeserver.service
          sudo systemctl status nodeserver.service

# Outputs
Outputs:
  # Show the VPC ID
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
  # Public Subnet 1
  PublicSubnet1:
    Description: Public Subnet-01
    Value: !Ref PublicSubnet1
  # Public Subnet 2
  PublicSubnet2:
    Description: Public Subnet-02
    Value: !Ref PublicSubnet2
  # Public Subnet 3
  PublicSubnet3:
    Description: Public Subnet-03
    Value: !Ref PublicSubnet3
  # Private Subnet 1
  PrivateSubnet1:
    Description: Private Subnet-01
    Value: !Ref PrivateSubnet1
  # Private Subnet 2
  PrivateSubnet2:
    Description: Private Subnet-02
    Value: !Ref PrivateSubnet2
  # Private Subnet 3
  PrivateSubnet3:
    Description: Private Subnet-03
    Value: !Ref PrivateSubnet3
  # List of private subnets
  PrivateSubnets:
    Description: The list of private subnets
    Value:
      !Join [
        ',',
        [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3],
      ]
  # List of public subnets
  PublicSubnets:
    Description: The list of public subnets
    Value:
      !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
