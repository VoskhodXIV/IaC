AWSTemplateFormatVersion: "2010-09-09"
Description:
  Template to setup networking resources such as Virtual Private Cloud(VPC), Internet Gateway, Route Tables, and Routes in a stack

# Parameters
Parameters:
  Environment:
    Description: Infrastructure as Code - Environment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  VpcCidrBlock:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.0.0.0/16
  CidrSubnet1:
    Description: Subnet-01 IP range in the first AZ(Availability Zone)
    Type: String
    Default: 10.0.10.0/24
  CidrSubnet2:
    Description: Subnet-02 IP range in the second AZ(Availability Zone)
    Type: String
    Default: 10.0.11.0/24
  CidrSubnet3:
    Description: Subnet-03 IP range in the third AZ(Availability Zone)
    Type: String
    Default: 10.0.20.0/24
  EC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    Description: "EC2Instance AMI"
  AMI:
    Type: String
    Default: "ami-0268abf582db81870"
    Description: "The custom AMI built using Packer"

# Setup resources
Resources:
  # Virtual Private Cloud
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub Internet Gateway
  # Internet Gateway Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # Subnet 1
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrSubnet1
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ1)
  # Subnet 2
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrSubnet2
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ2)
  # Subnet 3
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrSubnet3
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ3)
  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Public Route Table
  # Public Route in Route Table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Attach Subnet1 to Route Table
  PublicSubnet1RouteAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref Subnet1

  # Attach Subnet2 to Route Table
  PublicSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  # Attach Subnet3 to Route Table
  PublicSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet3

  # Custom security group on the custom VPC
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ApplicationSecurityGroup"
      GroupDescription: "Application Security Group"
      VpcId: !Ref VPC
      # Ingress rules
      SecurityGroupIngress:
        # SSH port
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:  0.0.0.0/0
        # HTTP port
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # HTTPS port
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # Application port
        - IpProtocol: tcp
          FromPort: 1337
          ToPort: 1337
          CidrIp: 0.0.0.0/0

# Launch the custom EC2 AMI instance
  EC2AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref EC2InstanceType
      KeyName: ec2-user
      SubnetId: !Ref Subnet1
      SecurityGroupIds:
        - !Ref EC2InstanceSecurityGroup
      DisableApiTermination: false # protected against accidental termination :NO
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 50
            Encrypted: true
      Tags:
        -
          Key: Name
          Value: webapp
      UserData:
        Fn::Base64:
            !Sub |
            #!/bin/bash
            echo "Starting the REST API Service"
            sudo systemctl start nodeserver
            sudo systemctl status nodeserver
            sudo systemctl enable nodeserver
            sudo systemctl restart nodeserver
            APISRVC=$?
            if [ $APISRVC -eq 0 ]; then
              echo "API service is running successfully!"
            else
              echo "Unable to start the API service"
            fi

# Outputs
Outputs:
    # Show the VPC ID
    VpcId:
      Description: VPC ID
      Value: !Ref VPC
    # Subnet 1
    Subnet1:
      Description: Public Subnet-01
      Value: !Ref Subnet1
    # Subnet 2
    Subnet2:
      Description: Public Subnet-02
      Value: !Ref Subnet2
    # Subnet 3
    Subnet3:
      Description: Public Subnet-03
      Value: !Ref Subnet3
    # List of subnets
    Subnets:
      Description: The list of subnets
      Value: !Join [ ",", [ !Ref Subnet1, !Ref Subnet2, !Ref Subnet3 ]]