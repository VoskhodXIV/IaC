AWSTemplateFormatVersion: '2010-09-09'

Description: Template to setup networking resources such as Virtual Private Cloud(VPC), Internet Gateway, Route Tables, and Routes in a stack

# Parameters
Parameters:
  Environment:
    Description: Infrastructure as Code - Environment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  VpcCidrBlock:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.0.0.0/16
  EC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    Description: 'EC2 AMI Instance Type'
  AMI:
    Type: String
    Default: 'ami-0002b2fe89eb2f1d9'
    Description: 'The custom AMI built using Packer'
  DBInstanceIdentifierName:
    Type: String
    Default: 'csye6225'
    Description: 'DBInstance Identifier Name'
  DBName:
    Type: String
    Default: 'csye6225'
    Description: 'DB Name'
  DBUser:
    Type: String
    Default: 'csye6225'
    Description: 'DB username'
  DBPassword:
    Type: String
    Default: 'poptart1234'
    Description: 'DB Password'
  HostedZoneName:
    Type: String
    Default: 'sydrawat.me.'
    Description: Hosted zone name
  SSLCertificateId:
    Type: String
    Default: 'e1a954a6-df13-4bf7-b466-0e3703e40c17'
    Description: 'Amazon provided SSL certificate for dev'

# Setup resources
Resources:
  # Virtual Private Cloud
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${AWS::StackName}-vpc'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${AWS::StackName}-ig'
  # Internet Gateway Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Defining Public Subnets
  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 1, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ1)
  # Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 2, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ2)
  # Public Subnet 3
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]]
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ3)

  # Route table and related configurations
  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Public Route Table
  # Public Route in Route Table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Attach PublicSubnet1 to Route Table
  PublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  # Attach Subnet2 to Route Table
  PublicSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  # Attach Subnet3 to Route Table
  PublicSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  # Defining Private Subnets
  # Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub Private Subnet (AZ1)
  # Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub Private Subnet (AZ2)
  # Private Subnet 3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [5, !Cidr [!GetAtt VPC.CidrBlock, 6, 8]]
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub Private Subnet (AZ3)

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Private Route Table

  # Attach PrivateSubnet1 to Route Table
  PrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  # Attach PrivateSubnet2 to Route Table
  PrivateSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  # Attach PrivateSubnet3 to Route Table
  PrivateSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  # RDS Key
  RDSKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS Key for RDS'
      KeyPolicy:
        Id: 'kms-key-for-rds'
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: kms:*
            Resource: '*'
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS'
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS'
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
  # RDS Key Alias
  RDSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/rdsKey
      TargetKeyId:
        Ref: RDSKmsKey

  # EBS Key
  EBSKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS Key for EBS'
      KeyPolicy:
        Id: 'kms-key-for-ebs'
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':root']]
                - !Join [
                    '',
                    [
                      'arn:aws:iam::',
                      !Ref 'AWS::AccountId',
                      ':role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling',
                    ],
                  ]
            Action: kms:*
            Resource: '*'
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS:
                - !Join [
                    '',
                    [
                      'arn:aws:iam::',
                      !Ref 'AWS::AccountId',
                      ':role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling',
                    ],
                  ]
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !Join [
                    '',
                    [
                      'arn:aws:iam::',
                      !Ref 'AWS::AccountId',
                      ':role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling',
                    ],
                  ]
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS:
                - !Join [
                    '',
                    [
                      'arn:aws:iam::',
                      !Ref 'AWS::AccountId',
                      ':role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling',
                    ],
                  ]
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
  # EBS Key Alias
  EBSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ebsKey
      TargetKeyId:
        Ref: EBSKmsKey

  # S3 bucket with encryption and lifecycle
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName:
        !Join [
          '',
          [
            !Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId]]]],
            '.',
            !Ref Environment,
            '.sydrawat.me',
          ],
        ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: Change storage class to IA after 30 days
            Status: Enabled
            ExpirationInDays: 31
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${AWS::StackName}-S3-bucket'

  # Custom security group on the custom VPC
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'ApplicationSecurityGroup'
      GroupDescription: 'Application Security Group'
      VpcId: !Ref VPC
      # Ingress rules
      SecurityGroupIngress:
        # SSH port
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # HTTP port
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          # CidrIp: 0.0.0.0/0
        # HTTPS port
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          # CidrIp: 0.0.0.0/0
        # Application port
        - IpProtocol: tcp
          FromPort: 1337
          ToPort: 1337
          # CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${AWS::StackName}-app-securitygroup'

  # Create RDS Parameter Group for PostgreSQL
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: PostgreSQL Database
      Family: postgres14
  # Create RDS Subnet Group in the VPC
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private Subnet Group for RDS PostgreSQL Database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
  # Create Security Group for RDS with inbound rules from EC2 Instance Security Group
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'DatabaseSecurityGroup'
      GroupDescription: 'Database Security Group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${AWS::StackName}-db-securitygroup'

  # Create IAM Role for EC2 Instance with S3 Bucket Policy
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'EC2-CSYE6225'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudwatchAgentServerPolicy' #Amazon Cloudwatch Agent Policy
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess' # DynamoDB policy
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess' # SNS policy
  # Create Iam Instance Profile
  EC2IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ec2-instance-profile
      Path: /
      Roles:
        - !Ref IAMRole
  S3RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:Put*'
              - 's3:Get*'
              - 's3:Delete*'
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
              - !Sub arn:aws:s3:::${S3Bucket}/*
      Roles:
        - Ref: IAMRole

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Ref DBInstanceIdentifierName
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: 14.4
      AllocatedStorage: 20
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: false
      MultiAZ: false
      StorageEncrypted: true
      KmsKeyId: !Ref RDSKmsKey
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBParameterGroupName: !Ref DBParameterGroup

  # Route 53 A type record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ['', [!Ref Environment, ., !Ref HostedZoneName]]
      Name: !Join ['', [!Ref Environment, ., !Ref HostedZoneName]]
      Type: A
      # TTL: '60'
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      # ResourceRecords:
      #   - !GetAtt EC2AppInstance.PublicIp

  # EC2 AutoScaling Launch Template
  ASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'asg_launch_config'
      LaunchTemplateData:
        ImageId: !Ref AMI
        InstanceType: !Ref EC2InstanceType
        IamInstanceProfile:
          Arn: !GetAtt
            - EC2IAMInstanceProfile
            - Arn
        KeyName: ec2-user
        SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: true
              VolumeSize: 50
              Encrypted: true
              KmsKeyId: !GetAtt EBSKmsKey.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            pwd
            cd /home/ubuntu/webapp
            cp .env .env.bak
            rm .env
            pwd
            touch .env
            echo ENVIRONMENT="${Environment}" >> .env
            echo PORT=1337 >> .env
            echo HOSTNAME="${RDSInstance.Endpoint.Address}" >> .env
            echo DATABASE="${DBName}" >> .env
            echo DBPASSWORD="${DBPassword}" >> .env
            echo DBUSER="${DBUser}" >> .env
            echo AWS_BUCKET_NAME="${S3Bucket}" >> .env
            echo AWS_REGION="${AWS::Region}" >> .env
            echo DYNAMO_DB_TABLE_NAME=${DynamoDBTable} >> .env
            echo SNS_TOPIC_ARN=${SNSservice} >> .env
            cat .env

            echo "Starting the REST API Service with new .env variables"
            sudo systemctl restart nodeserver.service
            sudo systemctl status nodeserver.service

  # DynamoDB
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: csye-6225
      AttributeDefinitions:
        - AttributeName: 'Email'
          AttributeType: 'S'
        - AttributeName: 'Token'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'Email'
          KeyType: 'HASH'
        - AttributeName: 'Token'
          KeyType: 'RANGE'
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true
      Tags:
        - Key: key
          Value: value

  # SNS Topic
  SNSservice:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: verify_email
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
      TopicName: verify_email
  # SNS topic policy
  SNStopicpolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
          - Sid: __default_statement_ID
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - SNS:Publish
              - SNS:DeleteTopic
              - SNS:ListSubscriptionsByTopic
              - SNS:GetTopicAttributes
              - SNS:Receive
              - SNS:AddPermission
              - SNS:Subscribe
            Resource:
              Ref: SNSservice
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
          - Sid: __console_pub_0
            Effect: Allow
            Principal:
              AWS: '*'
            Action: SNS:Publish
            Resource:
              Ref: SNSservice
          - Sid: __console_sub_0
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - SNS:Subscribe
              - SNS:Receive
            Resource:
              Ref: SNSservice
      Topics:
        - Ref: SNSservice
  # Lambda Permissions
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: SNSservice

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: emailVerify
      Role:
        Fn::Join:
          - ''
          - - 'arn:aws:iam::'
            - !Ref AWS::AccountId
            - ':role/'
            - !Ref LambdaRole
      Runtime: nodejs16.x
      Handler: index.handler
      Code:
        ZipFile: |
          console.log('In Lambda function');
          exports.handler=function(event,context,callback){
            console.log('Message from SNS');
            var message = event.Records[0].Sns.Message;
            callback(null,"Success");
          };
      Description: Function to store token in dynamodb and send email to SNS
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'LambdaFunctionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'

  # Auto Scaling Group
  ASGWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - !Select [0, !GetAZs '']
        - !Select [1, !GetAZs '']
        - !Select [2, !GetAZs '']
      Cooldown: '60'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref ASGLaunchTemplate
        Version: !GetAtt ASGLaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      NewInstancesProtectedFromScaleIn: false
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: 'true'
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: 'true'
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      TerminationPolicies:
        - OldestInstance
        - Default
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  # Scale Up Policy
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      # PolicyType: TargetTrackingScaling
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGWebApp
      Cooldown: '60'
      ScalingAdjustment: '1'
      # TargetTrackingConfiguration:
      #   PredefinedMetricSpecification:
      #     PredefinedMetricType: ASGAverageCPUUtilization
      #   TargetValue: 5.0
  # Scale Down Policy
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      # PolicyType: TargetTrackingScaling
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGWebApp
      Cooldown: '60'
      ScalingAdjustment: '-1'
      # TargetTrackingConfiguration:
      #   PredefinedMetricSpecification:
      #     PredefinedMetricType: ASGAverageCPUUtilization
      #   TargetValue: 2.0

  # High CPU Util Alarm
  HighCPUUtil:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: Scale-up EC2 instances if CPU usage > 5% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 20.0
      AlarmActions:
        - !Ref ScaleUpPolicy
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASGWebApp

  # Low CPU Util Alarm
  LowCPUUtil:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down EC2 instances if CPU usage < 3% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 3.0
      AlarmActions:
        - !Ref ScaleDownPolicy
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASGWebApp

  # Load Balancer security group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSecurityGroup
      GroupDescription: LoadBalancer security group to allow TCP traffic on ports 80 and 443 from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-lb-sg'
  # Load Balancer target group
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-app-lb-tg'
      Port: 1337
      Protocol: 'HTTP'
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/health'
      HealthCheckPort: '1337'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: 'instance'
      IpAddressType: 'ipv4'
      Matcher:
        HttpCode: '200-299'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-lb-tg'
  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: 'ipv4'
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub '${AWS::StackName}-app-lb'
      Scheme: 'internet-facing'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-lb'
      Type: 'application'
  # Load Balancer Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Port: 443
      Protocol: 'HTTPS'
      Certificates:
        - CertificateArn:
            !Join [
              '',
              [
                'arn:aws:acm:',
                !Ref AWS::Region,
                ':',
                !Ref AWS::AccountId,
                ':certificate/',
                !Ref SSLCertificateId,
              ],
            ]

# Outputs
Outputs:
  # Show the VPC ID
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
  # Public Subnet 1
  PublicSubnet1:
    Description: Public Subnet-01
    Value: !Ref PublicSubnet1
  # Public Subnet 2
  PublicSubnet2:
    Description: Public Subnet-02
    Value: !Ref PublicSubnet2
  # Public Subnet 3
  PublicSubnet3:
    Description: Public Subnet-03
    Value: !Ref PublicSubnet3
  # Private Subnet 1
  PrivateSubnet1:
    Description: Private Subnet-01
    Value: !Ref PrivateSubnet1
  # Private Subnet 2
  PrivateSubnet2:
    Description: Private Subnet-02
    Value: !Ref PrivateSubnet2
  # Private Subnet 3
  PrivateSubnet3:
    Description: Private Subnet-03
    Value: !Ref PrivateSubnet3
  # List of private subnets
  PrivateSubnets:
    Description: The list of private subnets
    Value:
      !Join [
        ',',
        [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3],
      ]
  # List of public subnets
  PublicSubnets:
    Description: The list of public subnets
    Value:
      !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
